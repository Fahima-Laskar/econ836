---
title: "Assignment 1b: Replicating *Sexual Orientation and Labor Economics* by Cara Brown (1998)"
author: "Daniel SÃ¡nchez"
date: "2023-01-12"
format: pdf
knitr:
  opts_chunk: 
    echo: true
---


This document walks through the replication of Cara Brown's 1998 paper *Sexual Orientation and Labor Economics* published at *Feminist Economics*.

# Preliminaries

I need the following R libraries to make this code work:


```{r}
#| label: setup
#| message: false
#| warning: false
library(tidyverse) # For data wrangling
library(haven) # Reading stata files
library(labelled) # For survey labels
library(modelsummary) # For tables
library(data.table) # For combinations
```


I load the data from the given file below:


```{r}
#| label: data-load
df<-
  read_dta('data/Census_2016_Hierarchial.dta')
```


# Data Cleaning

In this subsection I do some data cleaning and exploratory analysis so that I build a fit dataframe for the replication study.

Below, I clean the income and age group variables to have them as I'd need to in the replication. Note I use *haven*'s `as_factor()`, not base R `as.factor()`. We also filter for the ages we'd like to use, then create another age group which combines 45 to 49 with 50 to 54 to create 45-54.


```{r}
#| label: prelim-cleaning
#| warning: false

# First, rename the income variable (empin) to something more usable
# Also, we apply value labels as necessary in the mutate() call

df<-
  df %>% 
  rename(income = 'empin') %>% 
  mutate(agegrp = case_when(
    agegrp ==  88 ~ as.double(NA),
    TRUE ~ as.double(agegrp)
  ))

# Now, replace the income invalid values (88,888,888, 99,999,999) with actual NAs in R.

df <-
  df %>% 
  mutate(income_clean = case_when(
      income %in% c(88888888, 99999999) ~ as.numeric(NA),
      TRUE ~ income
    )
  )

df %>% select(PP_ID, agegrp, income_clean) %>% head()

# Do the same data cleaning with gender

df <-
  df %>% 
  mutate(sex = case_when(
    sex == 8 ~ as.double(NA),
    TRUE ~ as.double(sex)
    ))

```

Let us group by person and count how much records I have for that. Test to see if there is more than one observation per person


```{r}
#| label: person-group

people <-
  df %>% 
  group_by(PP_ID) %>% 
  summarise(obs= n())

people %>% filter(obs != 1)

```


There is only one observation per person in the dataset, as expected

# Constructing the presumed homosexual variable

I now construct a dummy variable `hmsxl` which is 1 if the individual is a presumed homosexual and 0 otherwise. The variable is complicated to build as it depends on many things. 

First, I will pay attention to the people who live with non-relatives only. I can see this variable from the `cfstat` variable in the census. These are potential couples to someone else, so I will create a dummy for these people, `non_rel`.


```{r}
#| label: non-rel

# Create the variable

df <-
  df %>% 
  mutate(non_rel = ifelse(cfstat == 7, 1, 0))

# Now, do the grouping at the household level, filtering out the people whose age we're not interested in

households <-
  df %>% 
  filter(agegrp %in% c(9,10,11)) %>% 
  group_by(HH_ID) %>% 
  summarise(non_rel = sum(non_rel),
            people = n(),
            sexes = n_distinct(sex)) %>% 
  arrange(desc(non_rel))

head(households)

```


We will determine if a household potentially has homosexual people in it (individuals unrelated through family) by marking households which have a greater number of people in the house compared to the number of genders. If there is, for instance, a house with 3 people in it where at least one of them is unrelated in family terms and only two genders, there is a potential homosexual couple living in the household. As I have no more than this, I have no choice to later "mark" all of the people living in the household as homosexual. 

Below, I will create the `hmsxl` indicator at the household level, and later left join this data to the individual level dataframe to mark each individual as presumed homosexuals.


```{r}
#| label: homosexual-indicator

# Create the indicator

households <-
  households %>% 
  mutate(hmsxl = ifelse(non_rel >= 1 & people > sexes, 'Homosexual','Heterosexual')) %>% 
  select(HH_ID, hmsxl)

# Make it at the individual level

df_joint <-
  df %>%
  filter(agegrp %in% c(9,10,11)) %>% 
  left_join(households, by = 'HH_ID') %>% 
  mutate(hmsxl = as.factor(hmsxl))

```



I can now compute conditional means for income based on ages and whether or not they're homosexual.


```{r}
#| label: tables
#| results: asis

df_table<-
  df_joint %>% 
  mutate(agegrp = case_when(
         agegrp %in% c(9,10) ~ '45-54',
         agegrp == 11 ~ '55-64'),
         sex = ifelse(sex == 1, 'Female', 'Male'),
         hmsxl = as.factor(hmsxl),
         MarStH = as_factor(MarStH)) %>% 
  select(hmsxl, agegrp, income_clean, sex, MarStH)

datasummary((income_clean * hmsxl * MarStH) ~ (Mean*sex*agegrp), 
            data = df_table,
            output = 'markdown')

```


# Doing the same with a pairwise approach

An alternative method is to start with the database from scratch as it is, filter out for the people that we want, and then define a new data frame that now creates all possible pairs of two people. We will filter out the dataframe for the people that we need, then


```{r}
#| label: all-pairs

df_for_pairs <- 
  df %>% 
  filter(agegrp %in% c(9,10,11),
         MarStH == 1) %>% 
  mutate(person_id = as.character(PP_ID))

pairs <- 
  CJ(df_for_pairs$PP_ID, df_for_pairs$PP_ID, unique = T) %>% 
  rename(person1 = 'V1', person2 = 'V2') %>% 
  mutate(identical = (person1 == person2)) %>% 
  filter(identical == FALSE)

combinations <- combn(unique(df_for_pairs$PP_ID),2) %>% t()
```


Having done the pairs, we will need to get their household information as well as their sex and other variables as well. We use joins for this. 

# With a for loop


# Another approach




